version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: imageviewer-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: image_viewer
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - imageviewer-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: imageviewer-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password123
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - imageviewer-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache (For Image Caching - 48GB Max Memory)
  redis:
    image: redis:7.2-alpine
    container_name: imageviewer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --maxmemory 48gb
      --maxmemory-policy allkeys-lru
      --save 60 1000
      --appendonly yes
    volumes:
      - redis_data:/data
    networks:
      - imageviewer-network
    deploy:
      resources:
        limits:
          memory: 50G
        reservations:
          memory: 48G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ImageViewer API
  imageviewer-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: imageviewer-api
    restart: unless-stopped
    ports:
      - "5000:5000"
      - "5001:5001"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000;https://+:5001
      - MongoDB__ConnectionString=mongodb://admin:password123@mongodb:27017/image_viewer?authSource=admin
      - MongoDB__DatabaseName=image_viewer
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password=password123
      - RabbitMQ__VirtualHost=/
      - Redis__ConnectionString=redis:6379
      - Hangfire__ConnectionString=mongodb://admin:password123@mongodb:27017/image_viewer_hangfire?authSource=admin
      - Hangfire__DatabaseName=image_viewer_hangfire
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
      - ./data:/app/data
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - imageviewer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ImageViewer Worker
  imageviewer-worker:
    build:
      context: .
      dockerfile: Dockerfile.Worker
    container_name: imageviewer-worker
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - MongoDB__ConnectionString=mongodb://admin:password123@mongodb:27017/image_viewer?authSource=admin
      - MongoDB__DatabaseName=image_viewer
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=admin
      - RabbitMQ__Password=password123
      - RabbitMQ__VirtualHost=/
      - Redis__ConnectionString=redis:6379
      - Hangfire__ConnectionString=mongodb://admin:password123@mongodb:27017/image_viewer_hangfire?authSource=admin
      - Hangfire__DatabaseName=image_viewer_hangfire
    volumes:
      - ./logs:/app/logs
      - ./temp:/app/temp
      - ./data:/app/data
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      imageviewer-api:
        condition: service_healthy
    networks:
      - imageviewer-network
    healthcheck:
      test: ["CMD", "pgrep", "-f", "ImageViewer.Worker"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Hangfire Scheduler Worker
  imageviewer-scheduler:
    build:
      context: ./src
      dockerfile: ImageViewer.Scheduler/Dockerfile
    container_name: imageviewer-scheduler
    restart: unless-stopped
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - MongoDB__ConnectionString=mongodb://mongodb:27017
      - MongoDB__DatabaseName=image_viewer
      - Hangfire__ConnectionString=mongodb://mongodb:27017
      - Hangfire__DatabaseName=image_viewer_hangfire
      - Hangfire__ServerName=ImageViewer-Scheduler-Docker
      - Hangfire__WorkerCount=5
      - Hangfire__JobSynchronizationInterval=5
      - RabbitMQ__HostName=rabbitmq
      - RabbitMQ__Port=5672
      - RabbitMQ__UserName=guest
      - RabbitMQ__Password=guest
    volumes:
      - ./logs/scheduler:/app/logs
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - imageviewer-network
    healthcheck:
      test: ["CMD", "pgrep", "-f", "ImageViewer.Scheduler"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: imageviewer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - imageviewer-api
    networks:
      - imageviewer-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mongodb_data:
    driver: local
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local

networks:
  imageviewer-network:
    driver: bridge
